return {
  "mason-org/mason.nvim",
  lazy = true,
  cmd = "Mason",
  event = { "BufReadPre", "BufNewFile" },
  opts = {
    ensure_installed = {
      "markdownlint-cli2",
      "markdown-toc",
      "ast-grep",
      "bash-debug-adapter",
      "bash-language-server",
      "beautysh",
      "biome",
      "cfn-lint",
      "checkstyle",
      -- "chrome-debug-adapter",
      "circleci-yaml-language-server",
      "clang-format",
      "clangd",
      "codelldb",
      "cortex-debug",
      "cpplint",
      "cpptools",
      "csharp-language-server",
      "csharpier",
      "css-lsp",
      "css-variables-language-server",
      "cssmodules-language-server",
      "delve",
      "docker-compose-language-service",
      "dockerfile-language-server",
      "dotenv-linter",
      "emmet-language-server",
      "emmet-ls",
      "emmylua_ls",
      "eslint-lsp",
      "eslint_d",
      "eugene",
      "firefox-debug-adapter",
      "fixjson",
      "gh-actions-language-server",
      "gitlab-ci-ls",
      "go-debug-adapter",
      "gofumpt",
      "goimports",
      "google-java-format",
      "gopls",
      -- "hadolint",
      "docker-language-server",
      "html-lsp",
      "htmlbeautifier",
      "java-debug-adapter",
      "java-test",
      "js-debug-adapter",
      "json-lsp",
      "local-lua-debugger-vscode",
      "lua-language-server",
      "luacheck",
      "luau-lsp",
      "lwc-language-server",
      "marksman",
      "netcoredbg",
      "nginx-config-formatter",
      "nginx-language-server",
      -- "node-debug2-adapter",
      "omnisharp",
      "omnisharp-mono",
      "pgformatter",
      "postgrestools",
      "prettier",
      -- "prettierd",
      "prisma-language-server",
      "pyright",
      "quick-lint-js",
      -- "remark-language-server",
      "ruff",
      "rustywind",
      "selene",
      "semgrep",
      "shellcheck",
      "shellharden",
      "shfmt",
      "sleek",
      "snyk",
      "some-sass-language-server",
      "sonarlint-language-server",
      -- "spectral-language-server",
      "sql-formatter",
      "sqlfluff",
      "sqlls",
      -- "sqls",
      "standardjs",
      "stimulus-language-server",
      "stylua",
      "superhtml",
      "svelte-language-server",
      "tailwindcss-language-server",
      "taplo",
      "termux-language-server",
      "trivy",
      "ts-standard",
      "typescript-language-server",
      "vale-ls",
      "vetur-vls",
      "vim-language-server",
      "vint",
      "vscode-java-decompiler",
      "vtsls",
      "vue-language-server",
      "yaml-language-server",
      "yamlfmt",
      "debugpy",
    },
    ui = {
      icons = {
        package_installed = "",
        package_pending = "",
        package_uninstalled = "",
      },
    },
    max_concurrent_installers = 3, -- Allow more concurrent installations
  },
  ---@param opts MasonSettings | {ensure_installed: string[]}
  config = function(_, opts)
    require("mason").setup(opts)
    local mr = require("mason-registry")
    mr:on("package:install:success", function()
      vim.defer_fn(function()
        -- trigger FileType event to possibly load this newly installed LSP server
        require("lazy.core.handler.event").trigger({
          event = "FileType",
          buf = vim.api.nvim_get_current_buf(),
        })
      end, 100)
    end)

    mr.refresh(function()
      for _, tool in ipairs(opts.ensure_installed) do
        local p = mr.get_package(tool)
        if not p:is_installed() then
          p:install()
        end
      end
    end)
  end,
}
